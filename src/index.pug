doctype html
html
	head
		meta(charset='utf-8')
		meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
		title StraticJS

		link(rel='stylesheet', type='text/css', href='build/build.css')

	body

		article.deck

			section
				h1 StraticJS

			section
				h2 About moi
				h3 Free software nerd
				h3 Node.js aficionado
				h3 Unix philosophy fan
				h3 Author of StraticJS

			section
				h2 What is StraticJS?
				h3 One-time generation of static HTML, CSS & JS blogs
				h3 Written in Node.js
				h3 Based on #[a(href='http://gulpjs.com') Gulp]
				h3 Focused on directly exposing (clean) internals
				h3 Easier to understand, cleaner mental model, more flexible

			section
				h2 Let's talk about blogging
				h3 Traditional platforms
				h3 WYSIWYG
				h3 Incoming request invokes code to render the page
				h3 Contents typically retrieved from a database

			section
				h2 What happens when you refresh?
				h3 Same thing
				h3 Code is run even if content didn't change
				h3 Enter static site generators
				h3 Push page computation from runtime to build-time

			section
				h2 Jekyll
				h3 Written in Ruby by Tom Preston-Werner
				h3 Works through well-defined directories
				h3 #[code _sass], #[code _posts], #[code _layouts], etc.

			section
				h2 In other words: magic
				h3 Have to learn what all the directories "mean"
				h3 Build process isn't clear
				h3 How do these actually get turned into a static site?

			section
				h2 Too many concepts
				h3 Layouts
				h3 Includes
				h3 Collections
				h3 Posts
				h3 Plugins
				h3 Understandable generally, but Jekyll-specific implementation

			section
				h2 Unix philosophy
				h3 Do one thing and do it well
				h3 Write programs to work together
				h3 Write programs to handle text streams, because that is a universal interface
				h3 (-#[cite Doug McIlroy])
				h3 What one thing does Jekyll do?

			section
				h2 Something that maps to Unix
				h3 #[a(href='http://gulpjs.com') Gulp]
				h3 Build system
				h3 Streams of in-memory file objects
				h3 Transforms connected by pipes

			section
				h2 Example
				pre
					code.language-javascript.
						/* var jade = require('gulp-jade'), etc. */
						gulp.task('html', function() {
						    gulp.src(['src/*.pug'])
						        .pipe(pug())
						        .pipe(rename({ extname: '.html' }))
						        .pipe(gulp.dest('dist'));
						});

			section
				h2 Breaking it down
				h3 #[code gulp.task] defines a "task" invoked with #[code gulp html]
				h3 #[code gulp.src] creates a "read stream" of objects representing files
				h3 #[code pug()] is a transform, or "through stream"
				h3 #[code .pipe(&lt;stream>)] connects the read stream to #[code &lt;stream>]
				h3 #[code gulp.dest()] creates a "write stream" (basically) which writes files to disk

			section
				h2 Example which hopefully makes sense now
				pre
					code.language-javascript.
						/* var jade = require('gulp-jade'), etc. */
						gulp.task('html', function() {
						    gulp.src(['src/*.pug'])
						        .pipe(pug())
						        .pipe(rename({ extname: '.html' }))
						        .pipe(gulp.dest('dist'));
						});

			section
				h2 So what is StraticJS?
				h3 A set of #[a(href='https://www.hypermodul.es/') hypermodular] Gulp plugins...
				h3 ...and a Yeoman generator.
				h3 That's it.

			section
				h2 Example: post pages
				pre
					code.language-markdown.
						---
						title: "Example post"
						time:
						  epoch: 1434272547
						  utcoffset: "UTC-8"
						author: "Alex Jordan"
						categories:
						  - development
						---
						
						# A Markdown Header
						
						Here's some text in this blog post.
													
			section
				h2 Example: post pages
				pre
					code.language-javascript.
						gulp.task('posts', function() {
						    return gulp.src('src/blog/*.md')
						               .pipe(frontMatter())
						               .pipe(remark({quiet: true}).use(remarkHtml))
						               .pipe(dateInPath())
						               .pipe(addsrc('src/blog/post.jade'))
						               .pipe(attachToTemplate('post.jade'))
						               .pipe(jade({pretty: true, basedir: __dirname}))
						               .pipe(rename({ extname: '.html' }))
						               .pipe(gulp.dest('dist/blog'));
						});
							

		script(src='build/build.js')
